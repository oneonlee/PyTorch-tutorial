# -*- coding: utf-8 -*-
"""PyTorchZeroToAll - Lecture 04: Back-propagation and Autograd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16vz3t_xhtMBJCiSLjaTr6NSR9zVkC8eh

# Lecture 04: Back-propagation and Autograd
"""

import torch
from torch.autograd import Variable

x_data = [1.0, 2.0, 3.0]
y_data = [2.0, 4.0, 6.0]

w = Variable(torch.Tensor([1.0]), requires_grad=True) # Any random value

# our model for the forward pass
def forward(x):
    return x*w

# Loss function
def loss(x, y):
    y_pred = forward(x)
    return (y_pred - y) * (y_pred - y)

w

w.data

w.data[0]

# Before training
print("predict (before training)", 4, forward(4).data[0])

# Training Loop
for epoch in range(100):
    for x_val, y_val in zip(x_data, y_data):
        l = loss(x_val, y_val)
        l.backward()
        print("\tgrad: ", x_val, y_val, w.grad.data[0])
        w.data = w.data - 0.01 * w.grad.data

        # Manually zero the gradients after updating weights
        w.grad.data.zero_()

    print(f"Epoch: {epoch}, loss = {l.data[0]}")

# After training
print("predict (after training)", "4 hours", forward(4).data[0])