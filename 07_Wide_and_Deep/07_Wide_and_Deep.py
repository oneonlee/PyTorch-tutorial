# -*- coding: utf-8 -*-
"""PyTorchZeroToAll - Lecture 07: Wide and Deep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15fP4pLS5OXro_5wjk7M2DufYMbYo2hD1

# Lecture 07: Wide and Deep

## Classifying Diabetes
"""

import numpy as np
import torch
from torch.autograd import Variable
import torch.nn.functional as F

xy = np.loadtxt("data-diabetes.csv", delimiter=",", dtype=np.float32)
x_data = Variable(torch.from_numpy(xy[:, 0:-1]))
y_data = Variable(torch.from_numpy(xy[:, [-1]]))

print(x_data.data.shape) # torch.Size([768, 8])
print(y_data.data.shape) # torch.Size([768, 1])

class Model(torch.nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.l1 = torch.nn.Linear(8, 6)
        self.l2 = torch.nn.Linear(6, 4)
        self.l3 = torch.nn.Linear(4, 1)

        self.sigmoid = torch.nn.Sigmoid()

    def forward(self, x):
        out1 = self.sigmoid(self.l1(x))
        out2 = self.sigmoid(self.l2(out1))
        y_pred = self.sigmoid(self.l3(out2))

        return y_pred

model = Model()

criterion = torch.nn.BCELoss(reduction='mean')
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)

# Training loop
epochs = 1000
for epoch in range(1, epochs+1):
    # Forward pass: Compute predicted y by passing x to the model
    y_pred = model(x_data)

    # Compute and print loss
    loss = criterion(y_pred, y_data)
    print(f"Epoch : {epoch}\tLoss = {loss.item()}")

    # Zero gradients, perform a backward pass, and update the weigths.
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

"""## Exercise : Classifying Diabetes with deep nets
More than 10 layers

"""

class DeepNets(torch.nn.Module):
    def __init__(self):
        super(DeepNets, self).__init__()
        self.l0 = torch.nn.Linear(8, 16)
        self.l1 = torch.nn.Linear(16, 32)
        self.l2 = torch.nn.Linear(32, 64)
        self.l3 = torch.nn.Linear(64, 128)
        self.l4 = torch.nn.Linear(128, 64)
        self.l5 = torch.nn.Linear(64, 32)
        self.l6 = torch.nn.Linear(32, 16)
        self.l7 = torch.nn.Linear(16, 8)
        self.l8 = torch.nn.Linear(8, 4)
        self.l9 = torch.nn.Linear(4, 1)

        self.sigmoid = torch.nn.Sigmoid()

    def forward(self, x):
        out0 = self.sigmoid(self.l0(x))
        out1 = self.sigmoid(self.l1(out0))
        out2 = self.sigmoid(self.l2(out1))
        out3 = self.sigmoid(self.l3(out2))
        out4 = self.sigmoid(self.l4(out3))
        out5 = self.sigmoid(self.l5(out4))
        out6 = self.sigmoid(self.l6(out5))
        out7 = self.sigmoid(self.l7(out6))
        out8 = self.sigmoid(self.l8(out7))
        y_pred = self.sigmoid(self.l9(out8))

        return y_pred

model = DeepNets()

criterion = torch.nn.BCELoss(reduction='mean')
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)

# Training loop
epochs = 1000
for epoch in range(1, epochs+1):
    # Forward pass: Compute predicted y by passing x to the model
    y_pred = model(x_data)

    # Compute and print loss
    loss = criterion(y_pred, y_data)
    print(f"Epoch : {epoch}\tLoss = {loss.item()}")

    # Zero gradients, perform a backward pass, and update the weigths.
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

