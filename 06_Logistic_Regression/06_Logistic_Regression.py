# -*- coding: utf-8 -*-
"""PyTorchZeroToAll - Lecture 06: Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bXXyokkx5EefglQIT325Cn-tz6pmO5rS

# Lecture 06: Logistic Regression
"""

import torch
from torch.autograd import Variable
import torch.nn.functional as F

x_data = Variable(torch.Tensor([[1.0], [2.0], [3.0], [4.0]]))
y_data = Variable(torch.Tensor([[0.], [0.], [1.], [1.]]))

class Model(torch.nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.linear = torch.nn.Linear(1, 1) # One in and one out

    def forward(self, x):
        y_pred = F.sigmoid(self.linear(x))
        return y_pred

# Our model
model = Model()

criterion = torch.nn.BCELoss(size_average=True) # BCE : Binary Cross Entropy
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)

# Training loop
epochs = 1000
for epoch in range(1, epochs+1):
    # Forward pass: Compute predicted y by passing x to the model
    y_pred = model(x_data)

    # Compute and print loss
    loss = criterion(y_pred, y_data)
    print(f"Epoch : {epoch}\tLoss = {loss.item()}")

    # Zero gradients, perform a backward pass, and update the weigths.
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

# After training
hour_var = Variable(torch.Tensor([[0.0]]))
print(f"Predict {0} hour : {model(hour_var).data[0][0] > 0.5}")
hour_var = Variable(torch.Tensor([[0.5]]))
print(f"Predict {0.5} hour : {model(hour_var).data[0][0] > 0.5}")
hour_var = Variable(torch.Tensor([[2.5]]))
print(f"Predict {2.1} hours : {model(hour_var).data[0][0] > 0.5}")
hour_var = Variable(torch.Tensor([[7.0]]))
print(f"Predict {7} hours : {model(hour_var).data[0][0] > 0.5}")